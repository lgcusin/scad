package ec.edu.uce.Biometrico.jsf.managedBeans;

import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import org.primefaces.context.RequestContext;

import ec.edu.uce.Biometrico.ejb.servicios.interfaces.JSDCLocal;
import ec.edu.uce.Biometrico.ejb.servicios.interfaces.SrvDocenteLocal;
import ec.edu.uce.Biometrico.ejb.servicios.interfaces.SrvLoginLocal;
import ec.edu.uce.Biometrico.ejb.servicios.interfaces.SrvSeguimientoLocal;
import ec.uce.edu.biometrico.jpa.Asistencia;
import ec.uce.edu.biometrico.jpa.ContenidoCurricular;
import ec.uce.edu.biometrico.jpa.DetallePuesto;
import ec.uce.edu.biometrico.jpa.FichaDocente;
import ec.uce.edu.biometrico.jpa.HorarioAcademico;
import ec.uce.edu.biometrico.jpa.Seguimiento;
import ec.uce.edu.biometrico.jpa.UsuarioRol;

@ManagedBean(name = "control")
@ViewScoped
public class Control {

	@EJB
	private JSDCLocal srvDvc;
	@EJB
	private SrvSeguimientoLocal srvSgmt;
	@EJB
	private SrvDocenteLocal srvDcn;
	@EJB
	private SrvLoginLocal srvlgn;

	private FichaDocente regDcnt;
	private HorarioAcademico hrrI;
	private HorarioAcademico hrrF;
	private Asistencia regAss;
	private List<Asistencia> lstAss;
	private List<ContenidoCurricular> lstCnt;
	private List<Seguimiento> lstSgmt;
	private List<String> selecCnts;

	public String hora;
	public Date ahora;
	public SimpleDateFormat formateador;
	public boolean generado = false;
	public boolean flagDlg;
	public boolean flagIni;
	public boolean flagFin;
	public Integer fclId;
	private String horaClase;
	private String sgmObservacion;
	private Integer sgmHoraClaseRestante;
	private String sgmEstado;
	private boolean flagHrr;
	private boolean dispositivo = true;
	private boolean flagLog;
	private UsuarioRol usuarioRol;
	private String nick;
	private String clave;
	private List<DetallePuesto> dt;

	@PostConstruct
	public void init() {
		FacesContext context = FacesContext.getCurrentInstance();
		Login l = context.getApplication().evaluateExpressionGet(context, "#{login}", Login.class);
		fclId = l.getUsuarioRol().getUsuario().getPersona().getFichaEmpleados().get(0).getDetallePuestos().get(0)
				.getCarrera().getDependencia().getDpnId();
		iniciar();
	}

	public void iniciar() {
		regDcnt = new FichaDocente();
		dispositivo = srvDvc.inicializar();
		srvDvc.onLED();
	}

	@SuppressWarnings("deprecation")
	public void temporizador() {

		ahora = new Date();
		formateador = new SimpleDateFormat("HH:mm:ss");
		hora = formateador.format(ahora);
		if (!generado && ahora.getHours() == 5) {
			generar();
		} else if (ahora.getHours() == 6) {
			generado = false;
		}
	}

	public void validar() {
		System.out.println("Va iniciar a login huellas!!!");
		flagLog = true;
		RequestContext.getCurrentInstance().addCallbackParam("flagLog", flagLog);
	}

	public String ingresar() throws SQLException, IOException {
		usuarioRol = srvlgn.verificar(nick, clave);
		if (usuarioRol.getUsroId() != null) {
			if (usuarioRol.getRol().getRolId() == 5) {
				dt = srvlgn.listarDetallePuestoDocente(usuarioRol.getUsuario().getPersona().getPrsId());
				regDcnt = dt.get(0).getFichaDocente();
				regDcnt.setDetallePuestos(dt);
				registrar();
			}
			return null;
		} else {
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "usuario o contraseña no validos", "");
			FacesContext.getCurrentInstance().addMessage(null, msg);
			flagLog = false;
			RequestContext.getCurrentInstance().addCallbackParam("flagLog", flagLog);
			return null;
		}
	}

	public void detectar() throws SQLException, IOException, InterruptedException {
		// TimeUnit.MILLISECONDS.sleep(1000);
		if (dispositivo) {
			regDcnt = srvDvc.comparar();
			if (regDcnt != null) {
				if (regDcnt.getFcdcId() != null) {
					registrar();
				} else if (regDcnt.getFcdcId() == 0 || regDcnt.getFcdcId() == 999999) {
					System.out.println("No hay docente");

				} else if (regDcnt.getFcdcId() == null) {
					FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Docente no registrado", "");
					FacesContext.getCurrentInstance().addMessage(null, msg);
				} else {
					FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "Problema con SecuGen USB",
							"Verificar el funcionamiento");
					FacesContext.getCurrentInstance().addMessage(null, msg);
					srvDvc.cerrar();

				}
			}
		} else {
			dispositivo = srvDvc.inicializar();
		}

	}

	public String registrar() throws SQLException, IOException {
		flagDlg = false;
		flagIni = false;
		flagFin = false;
		// regDcnt = srvDvc.comparar();
		// Compara si hay un horario con la hora de entrada o salida
		hrrI = srvSgmt.verificarHorario(ahora, regDcnt.getFcdcId(), true, fclId, 1);
		hrrF = srvSgmt.verificarHorario(ahora, regDcnt.getFcdcId(), false, fclId, 2);

		if (hrrI.getHracId() != null && hrrF.getHracId() != null) {
			lstAss = srvSgmt.marcacionReg(ahora, regDcnt.getFcdcId());
			for (Asistencia asistencia : lstAss) {
				if (asistencia.getHorarioAcademico().getHracId().equals(hrrF.getHracId())
						&& asistencia.getAssEstado().equals("INICIADO")
						|| asistencia.getAssEstado().equals("ATRASADO")) {
					return finalizarClase(asistencia);
				} else if (asistencia.getHorarioAcademico().getHracId().equals(hrrI.getHracId())
						&& asistencia.getAssEstado().equals("FALTA")) {
					return inicializarClase(asistencia, "INICIADO");
				} else if (asistencia.getHorarioAcademico().getHracId().equals(hrrI.getHracId())
						&& asistencia.getAssEstado().equals("INICIADO")
						|| asistencia.getAssEstado().equals("ATRASADO")) {
					FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL, "Registro de entrada, ya existe",
							null);
					FacesContext.getCurrentInstance().addMessage(null, msg);
					return null;
				} else if (asistencia.getHorarioAcademico().getHracId().equals(hrrF.getHracId())
						&& asistencia.getAssEstado() == null) {

					if (asistencia.getHorarioAcademico().getHracId().equals(hrrI.getHracId())
							&& asistencia.getAssEstado().equals("FALTA")) {
						return inicializarClase(asistencia, "INICIADO");
					}
				}
			}
		}

		if (hrrI.getHracId() != null && hrrF.getHracId() == null) {
			lstAss = srvSgmt.marcacionReg(ahora, regDcnt.getFcdcId());
			if (lstAss.isEmpty()) {
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL,
						"No existen horarios para iniciar una clase", null);
				FacesContext.getCurrentInstance().addMessage(null, msg);
				return null;
			} else {
				for (Asistencia asistencia : lstAss) {
					if (asistencia.getHorarioAcademico().getHracId().equals(hrrI.getHracId())
							&& asistencia.getAssEstado().equals("FALTA")) {
						return inicializarClase(asistencia, "INICIADO");
					} else if (asistencia.getHorarioAcademico().getHracId().equals(hrrI.getHracId())
							&& asistencia.getAssEstado().equals("INICIADO")) {
						FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL,
								"Registro de entrada, ya existe", null);
						FacesContext.getCurrentInstance().addMessage(null, msg);
						return null;
					}
				}
			}
		}

		if (hrrI.getHracId() == null && hrrF.getHracId() != null) {
			lstAss = srvSgmt.marcacionReg(ahora, regDcnt.getFcdcId());
			if (lstAss.isEmpty()) {
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL,
						"No existen horarios para finalizar una clase", null);
				FacesContext.getCurrentInstance().addMessage(null, msg);
				return null;
			} else {
				for (Asistencia asistencia : lstAss) {
					if (asistencia.getHorarioAcademico().getHracId().equals(hrrF.getHracId())
							&& asistencia.getAssEstado().equals("INICIADO")
							|| asistencia.getAssEstado().equals("ATRASADO")) {
						return finalizarClase(asistencia);
					} else if (asistencia.getHorarioAcademico().getHracId().equals(hrrF.getHracId())
							&& asistencia.getAssEstado().equals("FINALIZADO")) {
						FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL,
								"Registro de salida, ya existe", null);
						FacesContext.getCurrentInstance().addMessage(null, msg);
						return null;
					}
				}
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL, "No existe una clase, iniciada", null);
				FacesContext.getCurrentInstance().addMessage(null, msg);
				return null;
			}
		}

		if (hrrI.getHracId() == null && hrrF.getHracId() == null) {
			hrrI = srvSgmt.verificarHorario(ahora, regDcnt.getFcdcId(), true, fclId, 0);
			if (hrrI.getHracId() == null) {
				System.out.println("Horario de atraso");
				verHorarioFueraTiempo();
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_WARN,
						"No existe un horario o está fuera del plazo establecido", null);
				FacesContext.getCurrentInstance().addMessage(null, msg);
				return null;
			} else {
				lstAss = srvSgmt.marcacionReg(ahora, regDcnt.getFcdcId());
				if (lstAss.isEmpty()) {
					verHorarioFueraTiempo();
				} else {
					for (Asistencia asistencia : lstAss) {
						if (asistencia.getHorarioAcademico().getHracId().equals(hrrI.getHracId())
								&& asistencia.getAssEstado().equals("FALTA")) {
							return inicializarClase(asistencia, "ATRASADO");
						} else if (asistencia.getHorarioAcademico().getHracId().equals(hrrI.getHracId())
								&& asistencia.getAssEstado().equals("ATRASADO")
								|| asistencia.getAssEstado().equals("INICIADO")) {
							FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL,
									"Registro de entrada, ya existe", null);
							FacesContext.getCurrentInstance().addMessage(null, msg);
							return null;
						}
					}
				}
			}
		}

		return null;

	}

	@SuppressWarnings("deprecation")
	private String verHorarioFueraTiempo() {
		List<Asistencia> lstAuxA = srvDcn.listarAsistencia(regDcnt.getFcdcId(), ahora, ahora, null);
		lstAss = new ArrayList<>();
		for (Asistencia ass : lstAuxA) {
			if (ass.getHorarioAcademico().getHoraClaseAula().getHoraClase().getHoclHoraInicio() <= ahora.getHours()) {
				ass.setAssHoraEntrada(srvSgmt.obtenerHoraClasexHorario(ass.getHorarioAcademico()));
				lstAss.add(ass);
			}
		}
		flagHrr = true;
		flagDlg = false;
		flagLog = false;
		RequestContext.getCurrentInstance().addCallbackParam("flagLog", flagLog);
		RequestContext.getCurrentInstance().addCallbackParam("flagHrr", flagHrr);
		RequestContext.getCurrentInstance().addCallbackParam("flagDlg", flagDlg);
		return null;

	}

	private String inicializarClase(Asistencia asistencia, String estado) {
		// Cruzar contenido-syllabus con seguimiento-syllabus
		lstCnt = srvSgmt.buscarContenidos(
				hrrI.getMallaCurricularParalelo().getMallaCurricularMateria().getMateria().getMtrId());
		if (lstCnt.isEmpty()) {
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL, "No se encontraron temas de clases",
					"Verifique si existen el syllabus respectivo");
			FacesContext.getCurrentInstance().addMessage(null, msg);
			RequestContext.getCurrentInstance().addCallbackParam("flagDlg", flagDlg);
			return null;
		} else {
			lstSgmt = srvSgmt.getSeguimiento(
					hrrI.getMallaCurricularParalelo().getMallaCurricularMateria().getMateria().getMtrId(),
					regDcnt.getFcdcId());
			horaClase = srvSgmt.obtenerHoraClasexHorario(hrrI);
			int tiempo = hrrI.getHoraClaseAula().getHoraClase().getHoclHoraFin()
					- hrrI.getHoraClaseAula().getHoraClase().getHoclHoraInicio();
			List<ContenidoCurricular> lstAux = new ArrayList<>();
			if (lstSgmt.isEmpty()) {
				// sgmHoraClaseRestante =
				// lstCnt.get(0).getUnidadCurricular().getSyllabo().getSylHorasClase()
				// - tiempo;
				for (ContenidoCurricular cnt : lstCnt) {
					lstAux.add(cnt);
					if (lstAux.size() == 3) {
						break;
					}
				}
				lstCnt = lstAux;
			} else {
				// sgmHoraClaseRestante = lstSgmt.get(lstSgmt.size() -
				// 1).getSgmHoraClaseRestante() - tiempo;
				for (ContenidoCurricular cnt : lstCnt) {
					for (Seguimiento sgm : lstSgmt) {
						if (cnt.getCncrId().equals(sgm.getContenidoCurricular().getCncrId())) {
						} else {
							lstAux.add(cnt);
							break;
						}
					}
					if (lstAux.size() == 3) {
						break;
					}
				}
				lstCnt = lstAux;
			}
			regAss = asistencia;
			regAss.setFichaDocente(regDcnt);
			formateador = new SimpleDateFormat("HH:mm");
			regAss.setAssHoraEntrada(formateador.format(ahora));
			regAss.setAssEstado(estado);
			sgmObservacion = "";
			flagIni = true;
			flagDlg = true;
			flagLog = false;
			RequestContext.getCurrentInstance().addCallbackParam("flagLog", flagLog);
			RequestContext.getCurrentInstance().addCallbackParam("flagDlg", flagDlg);
			return null;

		}
	}

	private String finalizarClase(Asistencia asistencia) {
		lstCnt = srvSgmt.buscarContenidos(
				hrrF.getMallaCurricularParalelo().getMallaCurricularMateria().getMateria().getMtrId());
		if (lstCnt.isEmpty()) {
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_FATAL, "No se encontraron temas de clases",
					"Verifique si existen el syllabus respectivo");
			FacesContext.getCurrentInstance().addMessage(null, msg);
			return null;
		} else {
			lstSgmt = srvSgmt.getSeguimiento(
					hrrF.getMallaCurricularParalelo().getMallaCurricularMateria().getMateria().getMtrId(),
					regDcnt.getFcdcId());
			horaClase = srvSgmt.obtenerHoraClasexHorario(hrrF);
			int tiempo = hrrF.getHoraClaseAula().getHoraClase().getHoclHoraFin()
					- hrrF.getHoraClaseAula().getHoraClase().getHoclHoraInicio();
			List<ContenidoCurricular> lstAux = new ArrayList<>();
			if (lstSgmt.isEmpty()) {
				sgmHoraClaseRestante = lstCnt.get(0).getUnidadCurricular().getSyllabo().getSylHorasClase() - tiempo;
				for (ContenidoCurricular cnt : lstCnt) {
					lstAux.add(cnt);
					if (lstAux.size() == 3) {
						break;
					}
				}
				lstCnt = lstAux;
			} else {
				sgmHoraClaseRestante = lstSgmt.get(lstSgmt.size() - 1).getSgmHoraClaseRestante() - tiempo;
				for (ContenidoCurricular cnt : lstCnt) {
					for (Seguimiento sgm : lstSgmt) {
						if (cnt.getCncrId().equals(sgm.getContenidoCurricular().getCncrId())) {
						} else {
							lstAux.add(cnt);
							break;
						}
					}
					if (lstAux.size() == 3) {
						break;
					}
				}
				lstCnt = lstAux;
			}
			// root1 = createCheckboxDocuments();
			// sgmObservacion = lstSgmt.get(lstSgmt.size() -
			// 1).getSgmObservacion();
			regAss = asistencia;
			formateador = new SimpleDateFormat("HH:mm");
			regAss.setAssHoraSalida(formateador.format(ahora));
			regAss.setAssEstado("FINALIZADO");
			flagFin = true;
			flagDlg = true;
			flagLog = false;
			RequestContext.getCurrentInstance().addCallbackParam("flagLog", flagLog);
			RequestContext.getCurrentInstance().addCallbackParam("flagDlg", flagDlg);
			return null;
		}

	}

	public void guardarAsistencia() {
		flagDlg = false;
		try {
			if (selecCnts.isEmpty() && flagIni) {
				flagDlg = true;
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Debe escoger un tema", null);
				FacesContext.getCurrentInstance().addMessage(null, msg);
				RequestContext.getCurrentInstance().addCallbackParam("flagDlg", flagDlg);
			} else if (selecCnts.isEmpty() && flagFin) {
				if (!sgmObservacion.equals(lstSgmt.get(lstSgmt.size() - 1).getSgmObservacion())) {
					lstSgmt.get(lstSgmt.size() - 1).setSgmObservacion(sgmObservacion);
					srvSgmt.guardarActualizarSeguimiento(lstSgmt.get(lstSgmt.size() - 1));
				}
				actualizarRegistros(regAss);
				cleanClose();
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Asistencia guardada", null);
				FacesContext.getCurrentInstance().addMessage(null, msg);
				RequestContext.getCurrentInstance().addCallbackParam("flagDlg", flagDlg);
			} else {
				for (String selectcnt : selecCnts) {
					for (ContenidoCurricular con : lstCnt) {
						if (selectcnt.equals(con.getCncrDescripcion())) {
							Seguimiento seg = new Seguimiento();
							seg.setAsistencia(regAss);
							if (flagIni) {
								seg.setMallaCurricularParalelo(hrrI.getMallaCurricularParalelo());
							} else {
								seg.setMallaCurricularParalelo(hrrF.getMallaCurricularParalelo());
							}
							seg.setContenidoCurricular(con);
							seg.setSgmObservacion(sgmObservacion);
							seg.setSgmHoraClaseRestante(sgmHoraClaseRestante);
							seg.setSgmEstado(sgmEstado);
							srvSgmt.guardarActualizarSeguimiento(seg);
						}
					}

				}
				actualizarRegistros(regAss);
				cleanClose();
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_INFO, "Asistencia guardada", null);
				FacesContext.getCurrentInstance().addMessage(null, msg);
				RequestContext.getCurrentInstance().addCallbackParam("flagDlg", flagDlg);
			}

		} catch (Exception e) {
			RequestContext.getCurrentInstance().addCallbackParam("flagDlg", flagDlg);
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "Error al guardar, intente nuevamente",
					e.getMessage());
			FacesContext.getCurrentInstance().addMessage(null, msg);
		}

	}

	public void actualizarRegistros(Asistencia regAss) {
		for (Asistencia as : lstAss) {
			if (regAss.getHorarioAcademico().getMallaCurricularParalelo().getMlcrprId()
					.equals(as.getHorarioAcademico().getMallaCurricularParalelo().getMlcrprId())) {
				as.setAssEstado(regAss.getAssEstado());
				if (flagIni) {
					as.setAssHoraEntrada(regAss.getAssHoraEntrada());
				} else {
					as.setAssHoraSalida(regAss.getAssHoraSalida());
					;
				}
				srvSgmt.guardarRegistro(as);
			}
		}
	}

	public void cleanClose() {
		selecCnts = null;
		lstCnt = null;
		lstSgmt = null;
		regAss = null;
		regDcnt = null;
		sgmObservacion = null;
		sgmHoraClaseRestante = 0;
	}

	public void generar() {
		generado = srvSgmt.generar(ahora, fclId);
	}

	/*
	 * Metodo que permite mostrar el sistema biometrico sin otra aplicacion en
	 * el sistema.
	 * 
	 * @param proceso
	 */
	private void matarProceso(String proceso) {
		// Ha sido probado en win y linux
		String osName = System.getProperty("os.name");
		String cmd = "";
		if (osName.toUpperCase().contains("WIN")) {// S.O. Windows
			cmd += "tskill " + proceso;
		} else {
			cmd += "killall " + proceso;
		}
		Process hijo;
		try {
			hijo = Runtime.getRuntime().exec(cmd);
			hijo.waitFor();
			if (hijo.exitValue() == 0) {
				System.out.println("proceso matado con exito");
			} else {
				System.out.println("Incapaz de matar proceso. Exit code: " + hijo.exitValue() + "n");
			}
		} catch (IOException e) {
			System.out.println("Incapaz de matar proceso.");
		} catch (InterruptedException e) {
			System.out.println("Incapaz de matar proceso.");
		}
	}

	// setters and getters

	public String getHora() {
		return hora;
	}

	public boolean isGenerado() {
		return generado;
	}

	public void setGenerado(boolean generado) {
		this.generado = generado;
	}

	public void setHora(String hora) {
		this.hora = hora;
	}

	public FichaDocente getRegDcnt() {
		return regDcnt;
	}

	public void setRegDcnt(FichaDocente regDcnt) {
		this.regDcnt = regDcnt;
	}

	/**
	 * @return the hrrI
	 */
	public HorarioAcademico getHrrI() {
		return hrrI;
	}

	/**
	 * @param hrrI
	 *            the hrrI to set
	 */
	public void setHrrI(HorarioAcademico hrrI) {
		this.hrrI = hrrI;
	}

	/**
	 * @return the hrrF
	 */
	public HorarioAcademico getHrrF() {
		return hrrF;
	}

	/**
	 * @param hrrF
	 *            the hrrF to set
	 */
	public void setHrrF(HorarioAcademico hrrF) {
		this.hrrF = hrrF;
	}

	public List<ContenidoCurricular> getLstCnt() {
		return lstCnt;
	}

	public void setLstCnt(List<ContenidoCurricular> lstCnt) {
		this.lstCnt = lstCnt;
	}

	public List<String> getSelecCnts() {
		return selecCnts;
	}

	public void setSelecCnts(List<String> selecCnts) {
		this.selecCnts = selecCnts;
	}

	public Asistencia getRegAss() {
		return regAss;
	}

	public void setRegAss(Asistencia regAss) {
		this.regAss = regAss;
	}

	public boolean isFlagIni() {
		return flagIni;
	}

	public void setFlagIni(boolean flagIni) {
		this.flagIni = flagIni;
	}

	public boolean isFlagFin() {
		return flagFin;
	}

	public void setFlagFin(boolean flagFin) {
		this.flagFin = flagFin;
	}

	public String getSgmObservacion() {
		return sgmObservacion;
	}

	public void setSgmObservacion(String sgmObservacion) {
		this.sgmObservacion = sgmObservacion;
	}

	public Integer getSgmHoraClaseRestante() {
		return sgmHoraClaseRestante;
	}

	public void setSgmHoraClaseRestante(Integer sgmHoraClaseRestante) {
		this.sgmHoraClaseRestante = sgmHoraClaseRestante;
	}

	/**
	 * The fclId to get.
	 * 
	 * @return the fclId
	 */
	public Integer getFclId() {
		return fclId;
	}

	/**
	 * The fclId to set.
	 * 
	 * @param fclId
	 */
	public void setFclId(Integer fclId) {
		this.fclId = fclId;
	}

	/**
	 * @return the horaClase
	 */
	public String getHoraClase() {
		return horaClase;
	}

	/**
	 * @param horaClase
	 *            the horaClase to set
	 */
	public void setHoraClase(String horaClase) {
		this.horaClase = horaClase;
	}

	/**
	 * 
	 * @return the lstAss
	 */
	public List<Asistencia> getLstAss() {
		return lstAss;
	}

	/**
	 * @param lstAss
	 *            the lstAss to set
	 */
	public void setLstAss(List<Asistencia> lstAss) {
		this.lstAss = lstAss;
	}

	/**
	 * @return the sgmEstado
	 */
	public String getSgmEstado() {
		return sgmEstado;
	}

	/**
	 * @param sgmEstado
	 *            the sgmEstado to set
	 */
	public void setSgmEstado(String sgmEstado) {
		this.sgmEstado = sgmEstado;
	}

	/**
	 * @return the nick
	 */
	public String getNick() {
		return nick;
	}

	/**
	 * @param nick
	 *            the nick to set
	 */
	public void setNick(String nick) {
		this.nick = nick;
	}

	/**
	 * @return the clave
	 */
	public String getClave() {
		return clave;
	}

	/**
	 * @param clave
	 *            the clave to set
	 */
	public void setClave(String clave) {
		this.clave = clave;
	}

}
