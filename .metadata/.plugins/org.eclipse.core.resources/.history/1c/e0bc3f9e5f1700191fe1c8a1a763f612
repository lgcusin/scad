package managedBeans;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseId;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

import lector.JSDC;
import lector.JSDCLocal;

@ManagedBean(name = "lector")
@RequestScoped
public class LectorHuella {

	@EJB
	private JSDCLocal jsdcitrfc;
	private JSDC jsdc;

	private StreamedContent graphicText1;
	private StreamedContent graphicText2;
	private StreamedContent graphicText3;

	@PostConstruct
	public void init() {
		jsdc = new JSDC();
	}

	public void initDevice() {
		jsdcitrfc.inicializar();
	}

	public StreamedContent getImage1() throws IOException {
		FacesContext context = FacesContext.getCurrentInstance();
		 
		if (context.getCurrentPhaseId() == PhaseId.RENDER_RESPONSE) {
			return new DefaultStreamedContent();
		} else {
 
			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			BufferedImage img = ImageIO.read(context.getExternalContext()
					.getResourceAsStream("/img/p.jpg"));
			int w = img.getWidth(null);
			int h = img.getHeight(null);
 
			// image is scaled two times at run time
			int scale = 2;
 
			BufferedImage bi = new BufferedImage(w * scale, h * scale,
					BufferedImage.TYPE_INT_ARGB);
			Graphics g = bi.getGraphics();
 
			g.drawImage(img, 10, 10, w * scale, h * scale, null);
 
			ImageIO.write(bi, "png", bos);
 
			return new DefaultStreamedContent(new ByteArrayInputStream(
					bos.toByteArray()), "image/png");
 
		}
	}

	public String capturar2() {
		BufferedImage bufferedImg = jsdcitrfc.capturar(2);
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		try {
			ImageIO.write(bufferedImg, "png", os);
		} catch (IOException e) {
			e.printStackTrace();
		}
		this.graphicText2 = new DefaultStreamedContent(new ByteArrayInputStream(os.toByteArray()), "huella2/png");
		return null;
	}

	public String capturar3() {
		BufferedImage bufferedImg = jsdcitrfc.capturar(3);
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		try {
			ImageIO.write(bufferedImg, "png", os);
		} catch (IOException e) {
			e.printStackTrace();
		}
		this.graphicText3 = new DefaultStreamedContent(new ByteArrayInputStream(os.toByteArray()), "huella3/png");
		return null;
	}

	public String verificar() {
		jsdcitrfc.verificar();
		return "prueba";
	}

	// setters and getters

	public StreamedContent getGraphicText1() {
		return graphicText1;
	}

	public void setGraphicText1(StreamedContent graphicText1) {
		this.graphicText1 = graphicText1;
	}

	public StreamedContent getGraphicText2() {
		return graphicText2;
	}

	public void setGraphicText2(StreamedContent graphicText2) {
		this.graphicText2 = graphicText2;
	}

	public StreamedContent getGraphicText3() {
		return graphicText3;
	}

	public void setGraphicText3(StreamedContent graphicText3) {
		this.graphicText3 = graphicText3;
	}

}
