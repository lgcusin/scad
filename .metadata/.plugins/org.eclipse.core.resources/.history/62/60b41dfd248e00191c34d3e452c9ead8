package managedBeans;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.application.FacesMessage.Severity;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.SessionScoped;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ComponentSystemEvent;

import org.primefaces.event.RowEditEvent;

import model.Actividad;
import model.Carrera;
import model.Contenido;
import model.Feriado;
import model.Herramienta;
import model.MallaCurricularMateria;
import model.Materia;
import model.Syllabo;
import model.UnidadCurricular;
import servicios.SrvEmpleadoLocal;
import servicios.SrvSeguimientoLocal;

@ManagedBean(name = "syllabus")
@SessionScoped
public class Syllabus {

	@EJB
	private SrvSeguimientoLocal srvSgm;
	@EJB
	private SrvEmpleadoLocal srvEmp;

	public Materia selectMtr;
	public MallaCurricularMateria mllCrrMateria;
	public Syllabo syl;
	public UnidadCurricular uc;
	public Carrera selectCrr;
	public Integer crrId;
	public List<Carrera> lstC;
	public List<Materia> lstM;
	public List<UnidadCurricular> lstUC;
	public List<Contenido> lstCnt;
	public List<Actividad> lstAct;
	public List<Herramienta> lstHrr;
	public boolean dataSyllabo;
	public boolean modiSyllabo;

	public String tipAsignatura;
	public String nmbDocente;
	public String prdAcademico;
	public int nmrHoras;
	public int nmrTutorias;

	public String descripcion;
	public String objGeneral;
	public String objEspecifico;
	public String contribucion;
	public String resultados;

	public String uncrNombre;
	public String uncrObjetivo;
	public String uncrResultado;

	public List<UnidadCurricular> lstUnidadCurriculars;
	public List<Contenido> lstContenidos;
	public List<Actividad> lstActividads;
	public List<Herramienta> lstherramientas;

	@PostConstruct
	public void init() {
		FacesContext context = FacesContext.getCurrentInstance();
		Principal p = context.getApplication().evaluateExpressionGet(context, "#{principal}", Principal.class);
		if (p.docente) {
			selectMtr = new Materia();
			lstC = srvSgm.listarAllCrrByFcdc(p.fdId);
			lstM = srvSgm.listarAllMatByFcdc(p.fdId);
		}
		if (p.empleado) {
			lstC = srvEmp.listarCarreras(p.fcId);
		}

	}

	public void buscar() {
		if (crrId != null) {
			lstM = srvSgm.listarMatByCrr(crrId);
		} else {
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Seleccione una carrera", null);
			FacesContext.getCurrentInstance().addMessage(null, msg);
		}
	}

	public String limpiar() {
		lstM = null;
		return null;
	}

	public String verDetaSyllabus() {
		selectCrr = srvSgm.getCarrera(selectMtr.getMtrId());
		mllCrrMateria = srvSgm.getMallaCurricularMateria(selectMtr.getMtrId());
		// selectCrr = mllCrrMateria.getMateria().getCarrera();
		if (selectMtr.getMtrId() != null) {
			syl = srvSgm.getSyllabus(selectMtr.getMtrId());
			lstUC = srvSgm.listarUnidadCurricular(selectMtr.getMtrId());
		} else {
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Seleccione una materia", null);
			FacesContext.getCurrentInstance().addMessage(null, msg);
		}
		if (syl != null && !lstUC.isEmpty()) {
			for (UnidadCurricular unidad : lstUC) {
				lstCnt = srvSgm.listarContenidos(unidad.getUncrId());
				for (Contenido contenido : lstCnt) {
					lstAct = srvSgm.listarActividades(contenido.getCntId());
					lstHrr = srvSgm.listarHerramientas(contenido.getCntId());
					contenido.setActividads(lstAct);
					contenido.setHerramientas(lstHrr);
				}
				unidad.setContenidos(lstCnt);
			}
			dataSyllabo = true;
		} else {
			dataSyllabo = false;
		}
		return "syllabo";
	}

	public String modificar() {
		modiSyllabo = true;
		dataSyllabo = false;
		syl = new Syllabo();
		syl.setSylId(mllCrrMateria.getMlcrmtId());
		syl.setMallaCurricularMateria(mllCrrMateria);
		// syl = srvSgm.setSyllabus(mllCrrMateria);
		lstUnidadCurriculars = new ArrayList<>();
		return null;
	}

	public String regresar() {
		modiSyllabo = false;
		return "syllabus";
	}

	public String regresarPrincipal() {
		lstM = null;
		return "principal";
	}

	public void limpiarSesion(ComponentSystemEvent event) {
		lstM = null;

	}

	public String verUnidadCurricular() {
		uc = new UnidadCurricular();
		uc.setSyllabo(syl);
		if (lstUnidadCurriculars.isEmpty()) {
			uc.setUncrId(1);
		} else {
			uc.setUncrId(lstUnidadCurriculars.size() + 1);
		}
		// lstUnidadCurriculars.add(srvSgm.setUnidadCurricular(syl));
		lstUnidadCurriculars.add(uc);
		lstContenidos = new ArrayList<>();
		syl.setUnidadCurriculars(lstUnidadCurriculars);
		return "unidadCurricular";
	}

	public void onAddNewCnt() {
		Contenido contenido = new Contenido();
		lstActividads = new ArrayList<>();
		lstherramientas = new ArrayList<>();
		contenido.setUnidadCurricular(uc);
		if (lstContenidos.isEmpty()) {
			contenido.setCntId(1);
			contenido.setActividads(lstActividads);
			contenido.setHerramientas(lstherramientas);
		} else {
			contenido.setCntId(lstContenidos.size() + 1);
			contenido.setActividads(lstActividads);
			contenido.setHerramientas(lstherramientas);
		}
		lstContenidos.add(contenido);
		uc.setContenidos(lstContenidos);
	}

	public void onRowEditCnt(RowEditEvent event) {
		Contenido cnt = (Contenido) event.getObject();
		if (cnt.getCntDescripcion().isEmpty() || cnt.getCntDescripcion() == null
				|| cnt.getCntDescripcion().trim() == "") {
			FacesMessage msg = new FacesMessage(new FacesMessage().SEVERITY_WARN, "Descripcion contenido esta vacio",
					((Contenido) event.getObject()).getCntDescripcion());
			FacesContext.getCurrentInstance().addMessage(null, msg);
		} else {
			lstActividads = cnt.getActividads();
			for (Actividad actividad : lstActividads) {
				if (actividad.getActDescripcion().trim() == "") {
					lstActividads.remove(actividad);
				}
			}
			cnt.setActividads(lstActividads);
			lstherramientas = cnt.getHerramientas();
			for (Herramienta herramienta : lstherramientas) {
				if (herramienta.getHrrNombre().trim() == "") {
					lstherramientas.remove(herramienta);
				}
			}
			cnt.setHerramientas(lstherramientas);
			for (Contenido contenido : lstContenidos) {
				if (cnt.equals(contenido)) {
					lstContenidos.set(lstContenidos.indexOf(contenido), cnt);
				}
			}
			uc.setContenidos(lstContenidos);
			FacesMessage msg = new FacesMessage("Registro editado", ((Contenido) event.getObject()).getCntId() + "");
			FacesContext.getCurrentInstance().addMessage(null, msg);
		}

	}

	public void eliminarContenido(Contenido cnt) {
		uc.getContenidos().remove(cnt);
		lstContenidos = uc.getContenidos();
		// lstActividads.clear();
		// lstherramientas.clear();
		// List<Feriado> lstAux = new ArrayList<>();
		// for (Feriado f : lstFeriados) {
		// if (f.getFrdId() != feriado.getFrdId()) {
		// lstAux.add(f);
		// } else {
		// srvFer.eliminarFeriado(f);
		// }
		// }
		// /** lista restante de feriados */
		// lstFeriados = lstAux;
	}

	public void eliminarActividad(Contenido cnt, Actividad act) {
		cnt.getActividads().remove(act);
		// lstActividads.remove(act);
	}

	public void eliminarHerramienta(Contenido cnt, Herramienta hrr) {
		cnt.getHerramientas().remove(hrr);
		// lstherramientas.remove(hrr);
	}

	private String agregarContenido(Contenido cnt) {
		// try {
		// if (cnt.getCntId() != null) {
		// /** registro editado */
		// srvSgm.guardarActualizarContenido(cnt);
		// cnt.setUnidadCurricular(uc);
		// } else {
		// /** nuevo registro */
		// srvSgm.guardarActualizarContenido(cnt);
		// }
		// } catch (Exception e) {
		// System.out.println("Error al guardarActualizar Contenido: " + e);
		// }
		return null;

	}

	public void onAddNewAct(Contenido cnt) {
		Actividad actividad = new Actividad();
		lstActividads = cnt.getActividads();
		if (lstActividads.isEmpty()) {
			actividad.setActId(1);
		} else {
			actividad.setActId(lstActividads.size() + 1);
		}
		cnt.getActividads().add(actividad);
	}

	public void onRowEditAct(RowEditEvent event) {
		Actividad act = (Actividad) event.getObject();
		lstActividads.set(act.getActId() - 1, act);
		FacesMessage msg = new FacesMessage("Actividad editado", ((Actividad) event.getObject()).getActId() + "");
		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	private void actualizarActividad(Actividad object) {
		// TODO Auto-generated method stub

	}

	public void onAddNewHrr(Contenido cnt) {
		Herramienta herramienta = new Herramienta();
		lstherramientas = cnt.getHerramientas();
		if (lstherramientas.isEmpty()) {
			herramienta.setHrrId(1);
		} else {
			herramienta.setHrrId(lstherramientas.size() + 1);
		}
		cnt.getHerramientas().add(herramienta);
	}

	public void onRowEditHrr(RowEditEvent event) {
		Herramienta hrr = (Herramienta) event.getObject();
		lstherramientas.set(hrr.getHrrId() - 1, hrr);
		FacesMessage msg = new FacesMessage("Registro editado", ((Herramienta) event.getObject()).getHrrId() + "");
		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	private void actualizarHerramienta(Herramienta object) {
		// TODO Auto-generated method stub

	}

	public void onRowCancelCnt(RowEditEvent event) {
		FacesMessage msg = new FacesMessage("Edicion cancelada", "");
		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public void onRowCancelAct(RowEditEvent event) {
		FacesMessage msg = new FacesMessage("Edicion cancelada", "");
		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public void onRowCancelHrr(RowEditEvent event) {
		FacesMessage msg = new FacesMessage("Edicion cancelada", "");
		FacesContext.getCurrentInstance().addMessage(null, msg);
	}

	public String AddNewUnidadCurricular() {
		if (lstContenidos.isEmpty()) {
			FacesMessage msg = new FacesMessage(new FacesMessage().SEVERITY_WARN, "Debe contener uno o mas contenidos",
					null);
			FacesContext.getCurrentInstance().addMessage(null, msg);
			return null;
		} else {
			for (Contenido cnt : lstContenidos) {
				if (cnt.getCntDescripcion().isEmpty() || cnt.getCntDescripcion().trim() == " "
						|| cnt.getCntDescripcion() == null) {
					FacesMessage msg = new FacesMessage(new FacesMessage().SEVERITY_WARN,
							"Los contenidos no deben estar vacios", null);
					FacesContext.getCurrentInstance().addMessage(null, msg);
					return null;
				}
			}
		}

		uc.setUncrDescripcion("UNIDAD CURRICULAR No. " + Integer.toString(lstUnidadCurriculars.indexOf(uc) + 1));
		uc.setUncrNombre(uncrNombre);
		uc.setUncrObjetivo(uncrObjetivo);
		uc.setUncrResultado(uncrResultado);
		lstUnidadCurriculars.set(lstUnidadCurriculars.indexOf(uc), uc);
		lstUC = lstUnidadCurriculars;
		uncrNombre = null;
		uncrObjetivo = null;
		uncrResultado = null;
		uc = null;
		return "syllabo";
	}

	public String CancelUnidadCurricular() {
		lstUnidadCurriculars.remove(uc.getUncrId() - 1);
		return "syllabo";
	}

	// Setters and getters

	public List<Materia> getLstM() {
		return lstM;
	}

	public Materia getSelectMtr() {
		return selectMtr;
	}

	public MallaCurricularMateria getMllCrrMateria() {
		return mllCrrMateria;
	}

	public void setMllCrrMateria(MallaCurricularMateria mllCrrMateria) {
		this.mllCrrMateria = mllCrrMateria;
	}

	public void setSelectMtr(Materia selectMtr) {
		this.selectMtr = selectMtr;
	}

	public void setLstM(List<Materia> lstM) {
		this.lstM = lstM;
	}

	public List<Carrera> getLstC() {
		return lstC;
	}

	public void setLstC(List<Carrera> lstC) {
		this.lstC = lstC;
	}

	public Carrera getSelectCrr() {
		return selectCrr;
	}

	public void setSelectCrr(Carrera selectCrr) {
		this.selectCrr = selectCrr;
	}

	public Integer getCrrId() {
		return crrId;
	}

	public void setCrrId(Integer crrId) {
		this.crrId = crrId;
	}

	// Getters Syllabus

	public boolean isModiSyllabo() {
		return modiSyllabo;
	}

	public void setModiSyllabo(boolean modiSyllabo) {
		this.modiSyllabo = modiSyllabo;
	}

	public Syllabo getSyl() {
		return syl;
	}

	public void setSyl(Syllabo syl) {
		this.syl = syl;
	}

	public List<UnidadCurricular> getLstUC() {
		return lstUC;
	}

	public void setLstUC(List<UnidadCurricular> lstUC) {
		this.lstUC = lstUC;
	}

	public boolean isDataSyllabo() {
		return dataSyllabo;
	}

	public void setDataSyllabo(boolean dataSyllabo) {
		this.dataSyllabo = dataSyllabo;
	}

	/** Metodos para agregar datos del fomulario del sillabo **/

	public String getTipAsignatura() {
		return tipAsignatura;
	}

	public void setTipAsignatura(String tipAsignatura) {
		this.tipAsignatura = tipAsignatura;
	}

	public String getNmbDocente() {
		return nmbDocente;
	}

	public void setNmbDocente(String nmbDocente) {
		this.nmbDocente = nmbDocente;
	}

	public String getPrdAcademico() {
		return prdAcademico;
	}

	public void setPrdAcademico(String prdAcademico) {
		this.prdAcademico = prdAcademico;
	}

	public int getNmrHoras() {
		return nmrHoras;
	}

	public void setNmrHoras(int nmrHoras) {
		this.nmrHoras = nmrHoras;
	}

	public int getNmrTutorias() {
		return nmrTutorias;
	}

	public void setNmrTutorias(int nmrTutorias) {
		this.nmrTutorias = nmrTutorias;
	}

	public String getDescripcion() {
		return descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	public String getObjGeneral() {
		return objGeneral;
	}

	public void setObjGeneral(String objGeneral) {
		this.objGeneral = objGeneral;
	}

	public String getObjEspecifico() {
		return objEspecifico;
	}

	public void setObjEspecifico(String objEspecifico) {
		this.objEspecifico = objEspecifico;
	}

	public String getContribucion() {
		return contribucion;
	}

	public void setContribucion(String contribucion) {
		this.contribucion = contribucion;
	}

	public String getResultados() {
		return resultados;
	}

	public void setResultados(String resultados) {
		this.resultados = resultados;
	}

	public String getUncrNombre() {
		return uncrNombre;
	}

	public void setUncrNombre(String uncrNombre) {
		this.uncrNombre = uncrNombre;
	}

	public String getUncrObjetivo() {
		return uncrObjetivo;
	}

	public void setUncrObjetivo(String uncrObjetivo) {
		this.uncrObjetivo = uncrObjetivo;
	}

	public String getUncrResultado() {
		return uncrResultado;
	}

	public void setUncrResultado(String uncrResultado) {
		this.uncrResultado = uncrResultado;
	}

	public List<Contenido> getLstContenidos() {
		return lstContenidos;
	}

	public void setLstContenidos(List<Contenido> lstContenidos) {
		this.lstContenidos = lstContenidos;
	}

	public List<Actividad> getLstActividads() {
		return lstActividads;
	}

	public void setLstActividads(List<Actividad> lstActividads) {
		this.lstActividads = lstActividads;
	}

	public List<Herramienta> getLstherramientas() {
		return lstherramientas;
	}

	public void setLstherramientas(List<Herramienta> lstherramientas) {
		this.lstherramientas = lstherramientas;
	}

}
