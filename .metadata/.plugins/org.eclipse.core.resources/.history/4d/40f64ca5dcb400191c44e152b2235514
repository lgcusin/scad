package ec.edu.uce.academico.ejb.servicios.biometrico.impl;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.imageio.ImageIO;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.sql.rowset.serial.SerialException;

import ec.edu.uce.academico.ejb.servicios.biometrico.interfaces.SrvDocenteLocal;
import ec.edu.uce.academico.ejb.utilidades.constantes.GeneralesConstantes;
import ec.edu.uce.academico.jpa.entidades.publico.Asistencia;
import ec.edu.uce.academico.jpa.entidades.publico.ContenidoCurricular;
import ec.edu.uce.academico.jpa.entidades.publico.FichaDocente;
import ec.edu.uce.academico.jpa.entidades.publico.HorarioAcademico;
import ec.edu.uce.academico.jpa.entidades.publico.HuellaDactilar;
import ec.edu.uce.academico.jpa.entidades.publico.MallaCurricularMateria;
import ec.edu.uce.academico.jpa.entidades.publico.MallaCurricularParalelo;
import ec.edu.uce.academico.jpa.entidades.publico.Materia;
import ec.edu.uce.academico.jpa.entidades.publico.Persona;
import ec.edu.uce.academico.jpa.entidades.publico.Seguimiento;
import ec.edu.uce.academico.jpa.entidades.publico.TipoHuella;

/**
 * Session Bean implementation class DocenteBean
 */
@Stateless
public class SrvDocente implements SrvDocenteLocal {

	@PersistenceContext(unitName=GeneralesConstantes.APP_UNIDAD_PERSISTENCIA)
	private EntityManager em;

	public SrvDocente() {
		//
	}
	
	/**
	 * Lista los parametros de holgura para el registro del control academico en la facultad
	 */
	@Override
	public List<FichaDocente> listarDocentesxParametroxFacultad(String param, Integer fcId) {
		param = param.toUpperCase();
		param = "%" + param + "%";
		List<FichaDocente> lstD =null;
		try {
			Query query;
			Object[] objArray;
			query = em.createQuery(
					"select fd.fcdcId,p.prsId,p.prsPrimerApellido,p.prsSegundoApellido,p.prsNombres from DetallePuesto as dp join dp.fichaDocente as fd join fd.persona as p join dp.carrera as c join c.dependencia as d where (p.prsPrimerApellido LIKE :param or p.prsSegundoApellido LIKE :param or p.prsNombres LIKE :param) and d.dpnId=:fcId group by fd.fcdcId,p.prsId,p.prsPrimerApellido,p.prsSegundoApellido,p.prsNombres order by p.prsPrimerApellido, p.prsSegundoApellido");
			query.setParameter("param", param).setParameter("fcId", fcId);
			for (Object obj : query.getResultList()) {
				objArray = (Object[]) obj;
				FichaDocente fd = new FichaDocente((Integer) objArray[0]);
				fd.setFcdcPersona(em.find(Persona.class, (Integer) objArray[1]));
				lstD.add(fd);
			}
		} catch (Exception e) {
			System.out.println("Error al consultar docentes por facultad");
			return lstD;
		}
		return lstD;
	}

	
	@Override
	public List<TipoHuella> listarTipoHuellas() {
		List<TipoHuella> lstTipoHuella =null;
		try {
			Query query;
			Object[] objArray;
			query = em.createQuery(
					"select tp from TipoHuella as tp where tp.tphlId <> 0 order by tp.tphlId");
			for (Object obj : query.getResultList()) {
				objArray = (Object[]) obj;
				lstTipoHuella.add( (TipoHuella) objArray[0]);
			}
		} catch (Exception e) {
			System.out.println("Error al consultar docentes por facultad");
			return lstTipoHuella;
		}
		return lstTipoHuella;
	}

	@Override
	public List<BufferedImage> listarHuellas(Integer fcdc_id) throws SQLException, IOException {
		List<HuellaDactilar> lsth = em.createNamedQuery("HuellaDactilar.findAllById", HuellaDactilar.class)
				.setParameter("idDcnt", fcdc_id).getResultList();
		List<BufferedImage> lstI = null;
		for (HuellaDactilar hldc : lsth) {
			lstI.add(toBufferedImage(hldc.getHldPrimerHuella()));
			lstI.add(toBufferedImage(hldc.getHldSegundaHuella()));
		}
		return lstI;
	}

	public BufferedImage toBufferedImage(Blob blb) throws SQLException, IOException {
		Blob blob = blb;
		InputStream in = blob.getBinaryStream();
		BufferedImage image = ImageIO.read(in);
		return image;
	}

	public HuellaDactilar findHuella(Integer fdId, Integer thid) {
		HuellaDactilar hldc;
		try {
			hldc = em.createNamedQuery("HuellaDactilar.findByFdicThid", HuellaDactilar.class).setParameter("fdId", fdId)
					.setParameter("thid", thid).getSingleResult();

		} catch (Exception e) {
			System.out.println(e);
			return hldc = new HuellaDactilar();
		}
		return hldc;
	}

	@Override
	public void guardarImagen(BufferedImage bimg1, BufferedImage bimg2, FichaDocente fcdc, TipoHuella tphl)
			throws IOException, SerialException, SQLException {
		HuellaDactilar hldc;
		hldc = findHuella(fcdc.getFcdcId(), tphl.getTphlId());
		if (hldc != null) {
			for (int i = 0; i < 2; i++) {
				ByteArrayOutputStream baos = null;
				try {
					baos = new ByteArrayOutputStream();
					if (i == 0) {
						ImageIO.write(bimg1, "png", baos);
					}
					ImageIO.write(bimg2, "png", baos);
				} finally {
					try {
						baos.close();
					} catch (Exception e) {
					}
				}
				Blob huella = new javax.sql.rowset.serial.SerialBlob(baos.toByteArray());
				if (i == 0) {
					hldc.setHldPrimerHuella(huella);
				}
				hldc.setHldSegundaHuella(huella);
			}
			hldc.setFichaDocente(fcdc);
			hldc.setTipoHuella(tphl);
			em.merge(hldc);
		} else {
			hldc = new HuellaDactilar();
			for (int i = 0; i < 2; i++) {
				ByteArrayOutputStream baos = null;
				try {
					baos = new ByteArrayOutputStream();
					if (i == 0) {
						ImageIO.write(bimg1, "png", baos);
					}
					ImageIO.write(bimg2, "png", baos);
				} finally {
					try {
						baos.close();
					} catch (Exception e) {
					}
				}
				Blob huella = new javax.sql.rowset.serial.SerialBlob(baos.toByteArray());
				if (i == 0) {
					hldc.setHldPrimerHuella(huella);
				}
				hldc.setHldSegundaHuella(huella);
			}
			hldc.setFichaDocente(fcdc);
			hldc.setTipoHuella(tphl);
			em.persist(hldc);
		}
	}

	@Override
	public List<Asistencia> listarAsistencia(Integer fdId, Date inicio, Date fin, Integer crrId) {
		List<Asistencia> listAs = new ArrayList<>();
		try {
			Object[] objArray;
			Query query;
			if (crrId != null) {
				query = em.createQuery(
						"select a,h,mcp,mcm,m,crr from Asistencia as a join a.horarioAcademico as h join h.mallaCurricularParalelo as mcp join mcp.mallaCurricularMateria as mcm join mcm.materia as m join m.carrera as crr"
								+ " where a.fichaDocente.fcdcId=:fcdcId and a.assFecha >= :fechaInicio and a.assFecha <= :fechaFin and crr.crrId=:crrId"
								+ " order by a.assFecha asc");
				query.setParameter("crrId", crrId);
			} else {
				query = em.createQuery(
						"select a, h,mcp, mcm, m, hca, hc from Asistencia as a join a.horarioAcademico as h join h.mallaCurricularParalelo as mcp join mcp.mallaCurricularMateria as mcm join mcm.materia as m join h.horaClaseAula as hca join hca.horaClase as hc where a.fichaDocente.fcdcId=:fcdcId and a.assFecha >= :fechaInicio and a.assFecha <= :fechaFin order by a.assFecha asc");
			}
			query.setParameter("fcdcId", fdId);
			query.setParameter("fechaInicio", inicio);
			query.setParameter("fechaFin", fin);
			for (Object obj : query.getResultList()) {
				objArray = (Object[]) obj;
				listAs.add((Asistencia) objArray[0]);
			}
		} catch (Exception e) {
			System.out.println("Error al consultar Feriados: " + e);
		}
		return listAs;
	}

	@Override
	public List<ContenidoCurricular> listarContenidos(Integer fdId) {
		List<ContenidoCurricular> lstCn = new ArrayList<>();
		try {
			lstCn = em.createNamedQuery("Contenido.findAllByFdId", ContenidoCurricular.class).setParameter("fdId", fdId)
					.getResultList();
		} catch (Exception e) {
			System.out.println(e);
			return lstCn;
		}
		return lstCn;
	}

	@Override
	public List<String> listarActividades(Integer fdId) {
		List<String> lstAc = em.createNamedQuery("Actividad.findByFdId", String.class).setParameter("fcdcId", fdId)
				.getResultList();
		return lstAc;
	}

	/**
	 * Permite buscar el horario asignado a la asistencia a justificar
	 * 
	 * @param assId
	 * @return
	 */
	@Override
	public HorarioAcademico findHorarioByAsistencia(Asistencia asis) {
		HorarioAcademico horario = new HorarioAcademico();
		try {
			Object[] arrayObj;
			List<HorarioAcademico> lstH = new ArrayList<>();
			Query query = em.createQuery(
					"select h, h.horaClaseAula.horaClase from HorarioAcademico as h where h.mallaCurricularParalelo.mlcrprId=:mlcrpr and h.hracDia=:dia");
			query.setParameter("mlcrpr", asis.getHorarioAcademico().getHracMallaCurricularParalelo().getMlcrprId())
					.setParameter("dia", asis.getAssFecha().getDay() - 1);
			for (Object obj : query.getResultList()) {
				arrayObj = (Object[]) obj;
				lstH.add((HorarioAcademico) arrayObj[0]);
			}
			horario = lstH.get(0);
			// horario.setHracHoraInicio(lstH.get(0).getHracHoraInicio());
			horario.setHracHoraFin(lstH.get(lstH.size() - 1).getHracHoraFin());
		} catch (Exception e) {
			System.out.println("Error al consultar Feriados: " + e);
			return horario;
		}
		return horario;
	}

	/**
	 * Actualiza la asistencia justificada
	 * 
	 * @param asistencia
	 */
	@Override
	public void actualizarAsistencia(Asistencia asistencia) {
		if (asistencia.getAssId() != null) {
			em.merge(asistencia);
		}
	}

	@Override
	public List<Seguimiento> listarSeguimientosxDocenteMateria(Integer fcdcId, Integer mtrId) {
		List<Seguimiento> lstS = new ArrayList<>();
		try {
			Object[] objArray;
			Query query = em.createQuery(
					"select sg,ass,cnt,uc from Seguimiento as sg join sg.asistencia as ass join sg.contenidoCurricular as cnt join cnt.unidadCurricular as uc where sg.mallaCurricularParalelo.mallaCurricularMateria.materia.mtrId=:mtrId and ass.fichaDocente.fcdcId=:fcdcId order by sg.sgmId asc");
			query.setParameter("fcdcId", fcdcId).setParameter("mtrId", mtrId);
			for (Object obj : query.getResultList()) {
				objArray = (Object[]) obj;
				lstS.add((Seguimiento) objArray[0]);
			}
		} catch (Exception e) {
			System.out.println("Error al consultar seguimiento por docente y materia");
			return lstS;
		}
		return lstS;
	}

	@Override
	public void guardarActualizarEstados(FichaDocente selectDcnt, TipoHuella selectTp, boolean flagMovil,
			boolean flagSinHuella) {
		HuellaDactilar hd = new HuellaDactilar();
		hd = findHuella(selectDcnt.getFcdcId(), selectTp.getTphlId());
		if (hd.getHldcId() == null) {
			hd.setFichaDocente(selectDcnt);
			hd.setTipoHuella(selectTp);
			if (selectTp.getTphlId() == 5 && flagSinHuella) {
				hd.setHldcCodigoAuxiliar(1);
			} else if (selectTp.getTphlId() == 5 && !flagSinHuella) {
				hd.setHldcCodigoAuxiliar(0);
			}
			em.persist(hd);
		} else {
			if (selectTp.getTphlId() == 5 && flagSinHuella) {
				hd.setHldcCodigoAuxiliar(1);
			} else if (selectTp.getTphlId() == 5 && !flagSinHuella) {
				hd.setHldcCodigoAuxiliar(0);
			} else if (selectTp.getTphlId() == 4 && !flagMovil) {
				hd.setTipoHuella(em.find(TipoHuella.class, 0));
			}
			em.merge(hd);
		}
	}

	@Override
	public List<Boolean> listarestados(Integer fcdcId) {
		List<Boolean> lstE = new ArrayList<>(2);
		lstE.add(0, false);
		lstE.add(1, false);
		List<HuellaDactilar> lstHD = new ArrayList<>();
		try {
			Object[] arrayObj;
			Query query = em
					.createQuery(
							"select hd, th from HuellaDactilar as hd join hd.tipoHuella as th where hd.fichaDocente.fcdcId=:fcdcId and hd.tipoHuella.tphlId not in (1,2,3)")
					.setParameter("fcdcId", fcdcId);
			for (Object obj : query.getResultList()) {
				arrayObj = (Object[]) obj;
				lstHD.add((HuellaDactilar) arrayObj[0]);
			}
			for (HuellaDactilar hd : lstHD) {
				if (hd.getHldcCodigoAuxiliar() == 1) {
					lstE.add(0, true);
				} else if (hd.getTipoHuella().getTphlId() == 4) {
					lstE.add(1, true);
				} else if (hd.getHldcCodigoAuxiliar() != 1) {
					lstE.add(0, false);
				} else if (hd.getTipoHuella().getTphlId() == 0) {
					lstE.add(1, false);
				}
			}

		} catch (Exception e) {
			System.out.println("Erros obtener estados docente");
			return lstE;
		}
		return lstE;
	}

	@Override
	public boolean verificarLogin(FichaDocente regDcnt) {
		try {
			Query query = em.createQuery(
					"select hd.hldcCodigoAuxiliar from HuellaDactilar as hd where hd.fichaDocente.fcdcId=:fdId and hd.hldcCodigoAuxiliar=1");
			query.setParameter("fdId", regDcnt.getFcdcId());
			Integer codigo = (Integer) query.getSingleResult();
			if (codigo == 1) {
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			return false;
		}

	}

	@Override
	public List<Materia> listarMateriasxCarrera(Integer fcdcId, Integer crrId) {
		List<Materia> lstM = new ArrayList<>();
		try {
			Query query = em.createQuery(
					"select ma.mtrId from HorarioAcademico as ha join ha.mallaCurricularParalelo as mcpr join mcpr.paralelo as p join mcpr.mallaCurricularMateria as mcm join mcm.materia as ma join ma.carrera as cr join mcm.nivelByNvlId as nv  join ha.horaClaseAula as hca join hca.horaClase as hc join hca.aula as al  where mcpr.mlcrprId in ( select mcp.mlcrprId from CargaHoraria as ch inner join ch.mallaCurricularParalelo as mcp join ch.periodoAcademico as pa  where pa.pracEstado=0 and ch.detallePuesto.fichaDocente.fcdcId=:fdId group by mcp.mlcrprId) and hca.hoclalEstado=0 and cr.crrId=:crrId group by ma.mtrId order by ma.mtrId asc");
			query.setParameter("crrId", crrId);
			query.setParameter("fdId", fcdcId);
			for (Object obj : query.getResultList()) {
				lstM.add(em.find(Materia.class, obj));
			}
		} catch (Exception e) {
			System.out.println("Error al consultar materias por semestre: " + e);
			return lstM;
		}
		return lstM;
	}

	/**
	 * Permite obtener las asistencias de los docentes por facultad y enviar al
	 * mail cada mes.
	 * 
	 * @param fclId
	 * @return
	 */
	@Override
	public List<Asistencia> getAsistenciasReporte(Integer fclId) {
		List<Asistencia> asistenciaList = new ArrayList<>();
		try {
			Object[] objArray;
			Query query;
			if (fclId != null) {
				query = em.createQuery("ad,fd,p,ha,mcp,mcm,m "
						+ "from Asistencia as ad join as.fichaDocente as fd join fd.persona as p join as.horarioAcademico as ha "
						+ "join ha.mallaCurricularParalelo as mcp join mcp.mallaCurricularMateria as mcm join mcm.materia as m "
						+ "join m.carrera as car join car.dependencia as dep where dep.dpn_id=:fclId "
						+ "order by p.prs_primer_apellido,ad.asdc_fecha,m.mtr_descripcion,ad.asdc_hora_entrada ");
				query.setParameter("fclId", fclId);
				for (Object obj : query.getResultList()) {
					objArray = (Object[]) obj;
					Asistencia ad = (Asistencia) objArray[0];
					FichaDocente fd = (FichaDocente) objArray[0];
					Persona p = (Persona) objArray[0];
					HorarioAcademico ha = (HorarioAcademico) objArray[0];
					MallaCurricularParalelo mcp = (MallaCurricularParalelo) objArray[0];
					MallaCurricularMateria mcm = (MallaCurricularMateria) objArray[0];
					Materia m = (Materia) objArray[0];
					fd.setFcdcPersona(p);
					ad.setFichaDocente(fd);
					mcm.setMlcrmtMateria(m);
					mcp.setMlcrprMallaCurricularMateria(mcm);
					ha.setHracMallaCurricularParalelo(mcp);
					ad.setHorarioAcademico(ha);
					asistenciaList.add(ad);
				}
			}
		} catch (Exception e) {
			System.out.println("Error en el proceso getAsistenciasReporte" + e.getStackTrace());
		}
		return asistenciaList;
	}
}
