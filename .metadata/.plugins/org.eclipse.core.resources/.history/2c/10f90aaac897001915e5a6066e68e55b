package managedBeans;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.SessionScoped;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.imageio.ImageIO;

import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

import lector.JSDCLocal;
import model.FichaDocente;
import model.TipoHuella;
import servicios.SrvDocenteLocal;
import servicios.SrvLogin;

@ManagedBean(name = "registro")
@ViewScoped
public class Registro {

	// Interfaz de servicio
	@EJB
	private SrvDocenteLocal srvDcnt;
	@EJB
	private JSDCLocal jsdcBean;
	@EJB
	private SrvLogin srvLog;
	public Login beanLogin;
	// ObjetoF
	private FichaDocente selectDcnt;

	// Listas de objetos
	public List<FichaDocente> lstDcnt;
	private List<TipoHuella> lstTphl;

	// Entradas y salidas
	public String parametro;
	private BufferedImage bimg1;
	private BufferedImage bimg2;
	private StreamedContent graphic1;
	private StreamedContent graphic2;
	private int quality1;
	private int quality2;
	private boolean flagDvc;
	private boolean flagVrf;

	@PostConstruct
	public void init() {
		FacesContext context = FacesContext.getCurrentInstance();
		beanLogin = context.getApplication().evaluateExpressionGet(context, "#{login}", Login.class);
		lstDcnt = srvDcnt.listar("  ", 0);
	}

	// ####### Pagina busqueda #######
	public void listar() {
		lstDcnt = srvDcnt.listar(parametro, beanLogin.getDt().get(0).getCarrera().getFacultad().getFclId());
	}

	public String verHuellas() {
		if (selectDcnt == null) {
			FacesMessage msg = new FacesMessage("No ha seleccionado ningun docente");
			FacesContext.getCurrentInstance().addMessage(null, msg);
			return null;
		} else {
			if (jsdcBean.inicializar()) {
				jsdcBean.onLED();
				flagDvc = true;
			} else {
				FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_WARN, "Lector no encontrado", null);
				FacesContext.getCurrentInstance().addMessage(null, msg);
				flagDvc = false;
			}
			// selectDcnt = beanDcnt.getSelectDcnt();
			// selectDcnt.setDetallePuestos(srvLog.buscarDetallePuesto(selectDcnt.getFcdcId()));
			// crr =
			// selectDcnt.getDetallePuestos().get(0).getCarrera().getCrrNombre();
			lstTphl = srvDcnt.listarDedos();
			flagVrf = true;

			return "huellas";
		}
	}

	public String regresar() {
		lstDcnt = null;
		selectDcnt = null;
		return "principal";
	}

	public String limpiar() {
		lstDcnt = null;
		return null;
	}

	/* ##################### METODO DE HUELLAS ########################### */
	public void apagar() {
		jsdcBean.cerrar();
		bimg1 = null;
		bimg2 = null;
		graphic1 = null;
		graphic2 = null;
		quality1 = 0;
		quality2 = 0;
		lstTphl = null;
	}

	public void capturar1() throws IOException {
		bimg1 = jsdcBean.capturar();
		if (bimg1 == null) {
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Captura de huella fallida", null);
			FacesContext.getCurrentInstance().addMessage(null, msg);
		} else {
			quality1 = jsdcBean.calidad();
			graphic1 = toImage(bimg1);
		}

	}

	public void capturar2() throws IOException {
		bimg2 = jsdcBean.capturar();
		if (bimg2 == null) {
			FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Captura de huella fallida", null);
			FacesContext.getCurrentInstance().addMessage(null, msg);
		} else {
			quality2 = jsdcBean.calidad();
			graphic2 = toImage(bimg2);
		}
	}

	public StreamedContent toImage(BufferedImage bimg) throws IOException {
		ByteArrayOutputStream baos = null;
		StreamedContent grafico = null;
		try {
			baos = new ByteArrayOutputStream();
			ImageIO.write(bimg, "png", baos);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				baos.close();
			} catch (Exception e) {
				System.out.println(e.getLocalizedMessage());
			}
		}
		grafico = new DefaultStreamedContent(new ByteArrayInputStream(baos.toByteArray()));
		return grafico;
	}
	
	public String volver() {
		return "registro";
	}

	public String limpiar() {
		bimg1 = null;
		bimg2 = null;
		graphic1 = null;
		graphic2 = null;
		quality1 = 0;
		quality2 = 0;
		flagVrf = true;
		jsdcBean.inicializar();
		return null;
	}
	// ####### Setters y Getters Busqueda #######

	public String getParametro() {
		return parametro;
	}

	public void setParametro(String parametro) {
		this.parametro = parametro;
	}

	public List<FichaDocente> getLstDcnt() {
		return lstDcnt;
	}

	public void setLstDcnt(List<FichaDocente> lstDcnt) {
		this.lstDcnt = lstDcnt;
	}

	public FichaDocente getSelectDcnt() {
		return selectDcnt;
	}

	public void setSelectDcnt(FichaDocente selectDcnt) {
		this.selectDcnt = selectDcnt;
	}

}
